#!/bin/bash -e

# SCRIPT STATUS: IN THE WORKS. Results obtained after running twice on Sep 12, 2018.
# This script, written by WilsonMar@gmail.com, is intended to be run by you after you
# This script performs the commands described in the "Getting Started with Cloud KMS" (GSP079) hands-on lab at
#    https://google.qwiklabs.com/focuses/1713?parent=catalog
# Sign Out and Use Another Account. Copy and Paste Account and Password from the Qwiklabs page.
# Click "Done" at "Protect your account".
# Click "Yes" to Accept. # No need to create a new project 
# Click the icon for the Cloud Shell and START CLOUD SHELL.
# Copy the command below (without the #) 
# sh -c "$(curl -fsSL https://raw.githubusercontent.com/wilsonmar/DevSecOps/master/gcp/gcp-cloudkms-GSP079.sh)"
# Click the Google Cloud console and press command+V to paste:

# which is part of quest ???
# Comments under each command provide the RESPONSE returned when I ran it.


# This script deletes folders left over from previous run so can be rerun (within the same session).

### Define utility functions:
function echo_f() {
   local fmt="$1"; shift
   # shellcheck disable=SC2059
   printf "\\n>>> $fmt\\n" "$@"
}
function echo_c() {
  local fmt="$1"; shift
  printf "\\n  $ $fmt\\n" "$@"
}
function echo_r() {
  local fmt="$1"; shift
   # shellcheck disable=SC2059
   printf "$fmt\\n" "$@"
}
command_exists() {
  command -v "$@" > /dev/null 2>&1
}

TIME_START="$( date -u +%s )"
   # 1536771542
FREE_DISKBLOCKS_START="$( df | sed -n -e '2{p;q}' | cut -d' ' -f 6 )"
LOG_PREFIX=$(date +%Y-%m-%dT%H:%M:%S%z)-$( ( 1 + RANDOM % 1000 ) )
   # ISO-8601 date plus RANDOM=$((1 + RANDOM % 1000))  # 3 digit random number.
   #  LOGFILE="$0.$LOG_PREFIX.log"
echo_f "$0 starting at $LOG_PREFIX ..."

uname -a
   # RESPONSE: Linux cs-6000-devshell-vm-91a4d64c-2f9d-4102-8c22-ffbc6448e449 3.16.0-6-amd64 #1 SMP Debian 3.16.56-1+deb8u1 (2018-05-08) x86_64 GNU/Linux

    echo_c "gcloud auth list"
GCP_AUTH=$( gcloud auth list )
echo_r "$GCP_AUTH"
   #           Credentialed Accounts
   # ACTIVE  ACCOUNT
   #*       google462324_student@qwiklabs.net
   #To set the active account, run:
   #    $ gcloud config set account `ACCOUNT`


GCP_PROJECT=$(gcloud config list project | grep project | awk -F= '{print $2}' )
   # awk -F= '{print $2}'  extracts 2nd word in response:
   # project = qwiklabs-gcp-9cf8961c6b431994
   # Your active configuration is: [cloudshell-19147]

     echo_c "gcloud config list project"
PROJECT_ID=$(gcloud config list project --format "value(core.project)")
echo_f "GCP_PROJECT=$GCP_PROJECT, PROJECT_ID=$PROJECT_ID"  # response: "qwiklabs-gcp-9cf8961c6b431994"
RESPONSE=$(gcloud compute project-info describe --project $GCP_PROJECT)
   # Extract from:
   #items:
   #- key: google-compute-default-zone
   # value: us-central1-a
   #- key: google-compute-default-region
   # value: us-central1
   #- key: ssh-keys
#echo_r "RESPONSE=$RESPONSE"
#TODO: Extract value: based on previous line key: "google-compute-default-region"
#  cat "$RESPONSE" | sed -n -e '/Extract from:/,/<\/footer>/ p' | grep -A2 "key: google-compute-default-region" | sed 's/<\/\?[^>]\+>//g' | awk -F' ' '{ print $4 }'; rm -f $outputFile

exit

# No reference in this script to REGION="us-central1"
# echo_r "REGION=$REGION"


echo_f "Create a Cloud Storage bucket"
BUCKET_NAME="me_enron_corpus"
echo_c "gsutil mb gs://${BUCKET_NAME}"
        gsutil mb gs://${BUCKET_NAME}


echo_f "Check out the data"
# The Enron Corpus https://en.wikipedia.org/wiki/Enron_Corpus
# is a large database of over 600,000 emails generated by 158 employees of the Enron Corporation. 
# This data has been copied to the GCS bucket gs://enron_corpus/.
# Download one of the source files locally so that you can see what it looks like by running:

gsutil cp gs://enron_corpus/allen-p/inbox/1. .
# Tail the downloaded file to verify the email text is there:
tail 1


echo_f "Enable Cloud KMS"
gcloud services enable cloudkms.googleapis.com
   # Alternately, do it manually at https://console.cloud.google.com/apis/api/cloudkms.googleapis.com



echo_f "Create a Keyring and Cryptokey"
KEYRING_NAME=test CRYPTOKEY_NAME=qwiklab
# Keys can be grouped by environment (like test, staging, and prod)

echo_f "Create the KeyRing:"
# For this lab the location as global, but it could also be a specific region.
gcloud kms keyrings create $KEYRING_NAME --location global


echo_f "Create a CryptoKey named qwiklab:"
gcloud kms keys create $CRYPTOKEY_NAME --location global \
      --keyring $KEYRING_NAME \
      --purpose encryption
   # Note: You can't delete CryptoKeys or KeyRings in Cloud KMS

echo_f "MANUALLY: Go to Product menu > IAM & Admin > Cryptogrphic keys"
# https://console.cloud.google.com/iam-admin/kms"
exit


echo_f "Encrypt Your Data base64:"
PLAINTEXT=$(cat 1. | base64 -w0)
   # Note: Base-64 encoding allows binary data to be sent to the API as plaintext. 
   # This command works for images, videos, or any other kind of binary data.
echo_f "Using the encrypt endpoint, send the base64-encoded text to the specified key for encryption:"
curl -v "https://cloudkms.googleapis.com/v1/projects/$DEVSHELL_PROJECT_ID/locations/global/keyRings/$KEYRING_NAME/cryptoKeys/$CRYPTOKEY_NAME:encrypt" \
  -d "{\"plaintext\":\"$PLAINTEXT\"}" \
  -H "Authorization:Bearer $(gcloud auth application-default print-access-token)"\
  -H "Content-Type: application/json"
   # The response is a JSON payload containing the encrypted text in the attribute ciphertext.


echo_f "Prepare encrypted ciphertext for upload :"
curl -v "https://cloudkms.googleapis.com/v1/projects/$DEVSHELL_PROJECT_ID/locations/global/keyRings/$KEYRING_NAME/cryptoKeys/$CRYPTOKEY_NAME:encrypt" \
  -d "{\"plaintext\":\"$PLAINTEXT\"}" \
  -H "Authorization:Bearer $(gcloud auth application-default print-access-token)"\
  -H "Content-Type:application/json" \
| jq .ciphertext -r > 1.encrypted
   # The command-line utility jq grabs the encrypted text from the JSON response and save it to a file and
   # parse out the ciphertext property to the file 1.encrypted.


echo_f "Verify the encrypted data can be decrypted:"
# call the decrypt endpoint to verify the decrypted text matches the original email. 
# The encrypted data has information on which CryptoKey version was used to encrypt it, 
# so the specific version is never supplied to the decrypt endpoint.
curl -v "https://cloudkms.googleapis.com/v1/projects/$DEVSHELL_PROJECT_ID/locations/global/keyRings/$KEYRING_NAME/cryptoKeys/$CRYPTOKEY_NAME:decrypt" \
  -d "{\"ciphertext\":\"$(cat 1.encrypted)\"}" \
  -H "Authorization:Bearer $(gcloud auth application-default print-access-token)"\
  -H "Content-Type:application/json" \
| jq .plaintext -r | base64 -d

   # Note: Usually decryption is performed at the application layer. 
   # For a walkthrough on how to encrypt and decrypt data in multiple programming languages, 
   # read the Cloud KMS Quickstart at https://cloud.google.com/kms/docs/quickstart


echo_f "Upload encrypted ciphertext to your Cloud Storage Bucket:"
gsutil cp 1.encrypted gs://${BUCKET_NAME}


echo_f "Configure IAM Permissions:"
# In KMS, there are two major permissions to focus on. 
   # Permission cloudkms.admin allows a user or service account to manage KMS resources (keys)
   # Permission cloudkms.cryptoKeyEncrypterDecrypter allows a user or service account to encrypt and decrypt data using keys.


echo_f "Get the current authorized user:"
USER_EMAIL=$(gcloud auth list --limit=1 2>/dev/null | grep '@' | awk '{print $2}')
echo_r "USER_EMAIL=$USER_EMAIL"


echo_f "Use the current authorized user to assign IAM permissions:"
gcloud kms keyrings add-iam-policy-binding $KEYRING_NAME \
    --location global \
    --member user:$USER_EMAIL \
    --role roles/cloudkms.admin
   # Since CryptoKeys belong to KeyRings, and KeyRings belong to Projects, a user with a specific role or permission 
   # at a higher level in that hierarchy inherits the same permissions on the child resources. 
   # For example, a user who has the role of Owner on a Project is also an Owner on 
   # all the KeyRings and CryptoKeys in that project. 
   # Similarly, if a user is granted the cloudkms.admin role on a KeyRing, 
   # they have the associated permissions on the CryptoKeys in that KeyRing.


# Without the cloudkms.cryptoKeyEncrypterDecrypter permission, 
# the authorized user will not be able to use the keys to encrypt or decrypt data. 
echo_f "Assign the IAM permission to encrypt and decrypt data for any CryptoKey under the KeyRing created:"
gcloud kms keyrings add-iam-policy-binding $KEYRING_NAME \
    --location global \
    --member user:$USER_EMAIL \
    --role roles/cloudkms.cryptoKeyEncrypterDecrypter

# Now you can view the assigned permissions in Key Management in the Console.
echo_f "MANUALLY in https://console.cloud.google.com/iam-admin/kms"
echo_f "Check the box by the name of the key ring, then click Permissions in the right column"
   # This will open up a menu where you can see the accounts and permissions for the key ring you just added."


# The next series copies all emails for allen-p, encrypt them, and upload them to a Cloud Storage bucket.
echo_f "Copy (Back up) all files in the directory:"
gsutil -m cp -r gs://enron_corpus/allen-p .

echo_f "copy and paste into Cloud Shell to backup and encrypt all the files in the allen-p directory to your Cloud Storage bucket:"
MYDIR=allen-p
FILES=$(find $MYDIR -type f -not -name "*.encrypted")
for file in $FILES; do
  PLAINTEXT=$(cat $file | base64 -w0)
  curl -v "https://cloudkms.googleapis.com/v1/projects/$DEVSHELL_PROJECT_ID/locations/global/keyRings/$KEYRING_NAME/cryptoKeys/$CRYPTOKEY_NAME:encrypt" \
    -d "{\"plaintext\":\"$PLAINTEXT\"}" \
    -H "Authorization:Bearer $(gcloud auth application-default print-access-token)" \
    -H "Content-Type:application/json" \
  | jq .ciphertext -r > $file.encrypted
done
gsutil -m cp allen-p/inbox/*.encrypted gs://${BUCKET_NAME}/allen-p/inbox

# The script above loops over all the files in a given directory, encrypts them using the KMS API, and 
# uploads them to Google Cloud Storage.

echo_f "MANUALLY View the encrypted files - click Storage from the Console's left menu,"
echo_f "Drill into the files: Buckets > YOUR_BUCKET > allen-p > inbox"
   # Cloud Storage supports Server Side Encryption, https://cloud.google.com/storage/docs/encryption
   # which supports key rotation of your data and is the recommended way to encrypt data in Cloud Storage. 

echo_f "MANUALLY View Cloud Audit Logs"
# Google Cloud Audit Logging consists of two log streams, Admin Activity and Data Access, 
# which are generated by Google Cloud Platform services to help you answer the question 
# "who did what, where, and when?" within your Google Cloud Platform projects.
# Return to the Cryptographic keys page (IAM & admin > Encryption keys), 
# check the box next to your key ring, then 
  # click on the Activity tab in the right menu. 
  # This will take you to the Cloud Activity UI, where you should 
  # see the creation and all modifications made to the KeyRing.



FREE_DISKBLOCKS_END=$(df | sed -n -e '2{p;q}' | cut -d' ' -f 6) 
DIFF=$(((FREE_DISKBLOCKS_START-FREE_DISKBLOCKS_END)/2048))
# 380691344 / 182G = 2091710.681318681318681 blocks per GB
# 182*1024=186368 MB
# 380691344 / 186368 G = 2042 blocks per MB

TIME_END=$(date -u +%s);
DIFF=$((TIME_END-TIME_START))
MSG="End of script after $((DIFF/60))m $((DIFF%60))s seconds elapsed."
fancy_echo "$MSG and $DIFF MB disk space consumed."

# Script ended. Congratulations.
